---
title: Notes on Java Security
date: 2020-06-16
tags:
  - security
  - java
---

== Security Standards

=== Hashing

==== Hash Functions

.Cryptographic Hash Functions
What makes a `hash function` a Cryptographic Hash Function (CHF) is that is a one-way function: _practically infeasible to invert._

==== MD5

From https://en.wikipedia.org/wiki/MD5[Wikipedia]:

> The MD5 message-digest algorithm is a widely used hash function producing a 128-bit hash value. Although MD5 was initially designed to be used as a cryptographic hash function, it has been found to suffer from extensive vulnerabilities. It can still be used as a checksum to verify data integrity, but only against unintentional corruption. It remains suitable for other non-cryptographic purposes, for example for determining the partition for a particular key in a partitioned database.

Examples:

[source,bash]
----
$ echo "hello world" | md5sum 
6f5902ac237024bdd0c176cb93063dc4
$ echo "hello world" | md5sum 
6f5902ac237024bdd0c176cb93063dc4
$ echo "hello world " | md5sum
edf02967b5ae298061db1f1ad2a6b6b4
----

===== SHA-1 (Secure Hash Algorithm 1)

.From Wikipedia
> SHA-1 (Secure Hash Algorithm 1) is a cryptographic hash function which takes an input and produces a 160-bit (20-byte) hash value known as a message digest – typically rendered as a hexadecimal number, 40 digits long.
> [...] As of 2020, chosen-prefix attacks against SHA-1 are now practical[8] as such, it is recommended to remove SHA-1 from products as soon as possible and use instead SHA-256 or SHA-3. Replacing SHA-1 is urgent where it is used for signatures. 

Examples:

[source,bash]
----
$ echo "hello world " | sha1sum 
313c9923a67853f9000ede0db473abc06d50c9e7  -
----

===== SHA-2

.From Wikipedia
> SHA-2 includes significant changes from its predecessor, SHA-1. The SHA-2 family consists of six hash functions with digests (hash values) that are 224, 256, 384 or 512 bits: SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, SHA-512/256.

Examples:

[source,bash]
----
$ echo "hello world " | openssl dgst -sha256
ce4a4484a607ce2a5319550baf2386cbf63298090ed589133116caf9b38f9bde
$ echo "hello world " | openssl dgst -sha512
3060f0e2028911f23a73f115781bbf994196287ca8ef4a240ab3de59376d81569e1091a976428bb1d23739ef826d778045e36e7f2e77af76c8599fed1ba3fc61
----


=== Ciphers

Algorithms to secure a network connection that uses TLS.

*Key exchange algorithm*: Used to exchange a key between 2 devices.

*Bulk encryption algorithm*: used to encrypt the data being sent.

*Message authentication code algorithm* (MAC): provides data integrity checks to ensure data sent does not change in transit.

.Naming Scheme
`[protocol]_[key exchange alg.]_[block cipher]_[message authentication alg.]`

e.g. `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256` where:

- Protocol: `TLS`
- Key exchange algorithm: `ECDHE_RSA`
- Block cipher: `AES_128_GCM`
- MAC: `SHA256`


=== Key Exchange Algorithms

The *encryption key* is _public_ and distinct from the *decryption key* which is kept _secret_ (private).

==== RSA (Rivest-Shamir-Adleman)

From https://en.wikipedia.org/wiki/RSA_(cryptosystem)[Wikipedia]

Asymmetry is based on the practical difficulty of factoring the product of 2 large prime numbers.

> RSA is a relatively slow algorithm, and because of this, it is less commonly used to directly encrypt user data. More often, RSA passes encrypted shared keys for symmetric key cryptography which in turn can perform bulk encryption-decryption operations at much higher speed. 

==== DSA (Digital Signature Algorithm)

From https://en.wikipedia.org/wiki/Digital_Signature_Algorithm[Wikipedia]

> DSA is based on the algebraic properties of modular exponentiation, together with the discrete logarithm problem, which is considered to be computationally intractable.

==== ECDSA (Elliptic Curve Digital Signature Algorithm)

From https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm[Wikipedia]:

> As with elliptic-curve cryptography in general, the bit size of the public key believed to be needed for ECDSA is about twice the size of the security level, in bits. For example, at a security level of 80 bits (meaning an attacker requires a maximum of about 2 80 {\displaystyle 2^{80}} 2^{80} operations to find the private key) the size of an ECDSA public key would be 160 bits, whereas the size of a DSA public key is at least 1024 bits. On the other hand, the signature size is the same for both DSA and ECDSA: approximately 4 t {\displaystyle 4t} 4t bits, where t {\displaystyle t} t is the security level measured in bits, that is, about 320 bits for a security level of 80 bits. 

=== Public Key Certificates

==== X.509


=== Block encryption algorithms

==== DES (Data Encryption Standard)

==== AES (Advanced Encryption Standard)

It supersedes the DES. The algorithm described by AES is a sumetric key algorithm, meaning the same key is used for both encrypting and decrypting the data.

=== SSL/TLS

==== Key and Certificate Managements

> Source: https://www.feistyduck.com/library/openssl-cookbook/online/ch-openssl.html#openssl-key-and-certificate-management

===== Key Generation

*Key algorithm*

> RSA, DSA, and ECDSA

*Key size*

> Today, 2,048-bit RSA keys are considered secure, and that’s what you should use. Aim also to use 2,048 bits for DSA keys and at least 256 bits for ECDSA.

*Key passphrase*

> passphrases should be viewed only as a mechanism for protecting private keys when they are not installed on production systems. In other words, it’s all right to keep passphrases on production systems, next to the keys. If you need better security in production, you should invest in a hardware solution.


=== SASL

==== Authentication Methods

.From https://en.wikipedia.org/wiki/Simple_Authentication_and_Security_Layer[Wikipedia]
> A SASL mechanism implements a series of challenges and responses. Defined SASL mechanisms[1] include:
- EXTERNAL, where authentication is implicit in the context (e.g., for protocols already using IPsec or TLS)

- ANONYMOUS, for unauthenticated guest access
- PLAIN, a simple cleartext password mechanism, defined in RFC 4616
- OTP, a one-time password mechanism. Obsoletes the SKEY mechanism.
- SKEY, an S/KEY mechanism.
- CRAM-MD5, a simple challenge-response scheme based on HMAC-MD5.
- DIGEST-MD5 (historic[2]), partially HTTP Digest compatible challenge-response scheme based upon MD5. DIGEST-MD5 offered a data security layer.
- SCRAM (RFC 5802), modern challenge-response scheme based mechanism with channel binding support
- NTLM, an NT LAN Manager authentication mechanism
- GS2- family of mechanisms supports arbitrary GSS-API mechanisms in SASL.[3] It is now standardized as RFC 5801.
- GSSAPI, for Kerberos V5 authentication via the GSSAPI. GSSAPI offers a data-security layer.
- BROWSERID-AES128, for Mozilla Persona authentication[4]
- EAP-AES128, for GSS EAP authentication[5]
- GateKeeper (& GateKeeperPassport), a challenge-response mechanism developed by Microsoft for MSN Chat
- OAUTHBEARER, OAuth 2.0 bearer tokens (RFC 6750), communicated through TLS[6]
- OAUTH10A, OAuth 1.0a message-authentication-code tokens (RFC 5849, Section 3.4.2)[6]

===== Digest-MD5

.Further reading

- https://docs.oracle.com/javase/jndi/tutorial/ldap/security/digest.html

===== SCRAM

.From Wikipedia
> In cryptography, the Salted Challenge Response Authentication Mechanism (SCRAM) is a family of modern, password-based challenge–response authentication mechanisms providing authentication of a user to a server. As it is specified for Simple Authentication and Security Layer (SASL), it can be used for password-based logins to services like SMTP and IMAP (e-mail), or XMPP (chat).

> Although all clients and servers have to support the SHA-1 hashing algorithm, SCRAM is, unlike CRAM-MD5 or DIGEST-MD5, independent from the underlying hash function.[3] All hash functions defined by the IANA can be used instead.

SCRAM: 
* Salted Challenge Response Authentication Mechanism.
* Family of SASL mechanisms to address security concerns with traditional mechanisms, e.g PLAIN, DIGEST-MD5.
* Defined in https://tools.ietf.org/html/rfc5802#section-3[RFC-5802].

=== LDAP

==== Implementation

Authentication information is defined in an `IinitialDirContext` map where the following fields are required:

* `Content.SECURITY_AUTHENTICATION`
* `Content.SECURITY_PRINCIPAL`
* `Content.SECURITY_CREDENTIALS`

Principal and Credentials depend on the `SECURITY_AUTHENTICATION`.

==== Authentication Mechanisms

.LDAP v2

* anonymous
* simple (clear-text password)
* Kerberos v4

.LDAP v3

* anonymous
* simple (clear-text password)
* SASL authentication

=== Java implementation: JAAS
