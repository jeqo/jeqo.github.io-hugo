---
title: Notes on Apache Zookeeper Security
date: 2020-06-16
tags:
  - apache-zookeeper
  - security
---

== Authentication

.Examples

* https://github.com/jeqo/docker-composes/tree/master/zookeeper-security

=== Client/Server Authentication

==== SASL Authentication

SASL Authentication alone does not deny access to `anonymous` users. Beware of this as it gives a false sense of security, and can take some time to realize. Reference: https://issues.apache.org/jira/browse/ZOOKEEPER-1736

This can be solved by forcing an Authentication Scheme:

```properties
requireClientAuthScheme=sasl
```

---
.Futher reading
* https://cwiki.apache.org/confluence/display/ZOOKEEPER/Client-Server+mutual+authentication
---


=== Server/Server Authentication

---
.Futher reading
* https://cwiki.apache.org/confluence/display/ZOOKEEPER/Server-Server+mutual+authentication
---

== Authorization

=== Zookeeper ACLs

* An ACL pertains only to a specific `znode`.
* ACLs are not recursive.
* ACLs require an `id` with the form: `scheme:expression`, where `expression` depends on the authentication scheme.

====
From Zookeeper docs:

.ACL Permissions
ZooKeeper supports the following permissions:

* `CREATE`: you can create a child node

* `READ`: you can get data from a node and list its children.

* `WRITE`: you can set data for a node

* `DELETE`: you can delete a child node

* `ADMIN`: you can set permissions

.Builtin ACL Schemes
ZooKeeeper has the following built in schemes:

* `world` has a single id, anyone, that represents anyone.
* `auth` is a special scheme which ignores any provided expression and instead uses the current user, credentials, and scheme. Any expression (whether user like with SASL authentication or user:password like with DIGEST authentication) provided is ignored by the ZooKeeper server when persisting the ACL. However, the expression must still be provided in the ACL because the ACL must match the form scheme:expression:perms. This scheme is provided as a convenience as it is a common use-case for a user to create a znode and then restrict access to that znode to only that user. If there is no authenticated user, setting an ACL with the auth scheme will fail.
* `digest` uses a username:password string to generate MD5 hash which is then used as an ACL ID identity. Authentication is done by sending the username:password in clear text. When used in the ACL the expression will be the username:base64 encoded SHA1 password digest.
* `ip` uses the client host IP as an ACL ID identity. The ACL expression is of the form addr/bits where the most significant bits of addr are matched against the most significant bits of the client host IP.
* `x509` uses the client X500 Principal as an ACL ID identity. The ACL expression is the exact X500 Principal name of a client. When using the secure port, clients are automatically authenticated and their auth info for the x509 scheme is set.

====